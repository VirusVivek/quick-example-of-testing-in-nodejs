name: CI/CD Pipeline

# Triggers for the workflow
# This workflow will run on pushes to main/master branch and on pull requests to main/master
on:
  push:
    branches: [ main, master ]  # Triggers on push to main or master branch
  pull_request:
    branches: [ main, master ]  # Triggers on pull requests to main or master branch

jobs:
  # Define a single job that will handle build, test, and deployment
  build-and-test:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    
    # Define a matrix strategy to potentially test with multiple Node.js versions
    strategy:
      matrix:
        node-version: [16.x]  # You can add more Node.js versions (e.g., 18.x, 20.x) if needed
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Node.js environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      # Cache node modules to speed up builds
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Run tests
      - name: Run tests
        run: npm test
      
      # Run code coverage
      - name: Generate coverage report
        run: npm run cover
      
      # Upload test coverage as an artifact
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./reports/coverage
      
      # Build the application
      - name: Build
        run: |
          mkdir -p build
          cp -r *.js package.json package-lock.json build/
          cp -r test-data build/
          cp -r test build/
          ls -la build/
      
      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: ./build
      
      # Deploy to GitHub Pages (mock)
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "Deploying to GitHub Pages..."
          # This is a mock step. For real deployment, you would use actions/gh-pages
          # - name: Deploy to GitHub Pages
          #   uses: JamesIves/github-pages-deploy-action@v4
          #   with:
          #     folder: build
          
      # Add status badge (automated through README.md)
      - name: Status Badge
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "Status badge URL: https://github.com/${GITHUB_REPOSITORY}/actions/workflows/ci-cd.yml/badge.svg"
      
      # Notify on success/failure
      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd-notifications
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Build, test and deployment succeeded! :rocket:'
          SLACK_TITLE: Success
          SLACK_USERNAME: GitHub Actions
      
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd-notifications
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Build, test or deployment failed! :x:'
          SLACK_TITLE: Failure
          SLACK_USERNAME: GitHub Actions
